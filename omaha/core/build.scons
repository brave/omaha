# Copyright 2009 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

Import('env')

local_env = env.Clone()

inputs = [
    'core.cc',
    'core_metrics.cc',
    'google_update_core.cc',
    'scheduler.cc',
    'system_monitor.cc',
    ]

local_env['CPPPATH'] += [
    # Need to look in output dir to find .h files generated by midl compiler.
    # This also allows Hammer to understand dependencies between this subdir
    # and the .idl files in the goopdate folder.
    '$OBJ_ROOT',
    ]

local_env.ComponentLibrary('core', inputs)

core_env = env.Clone()
omaha_version_info = core_env['omaha_versions_info'][0]

core_env.Append(
    LIBS = [
        'advapi32.lib',
        'crypt32.lib',
        'kernel32.lib',
        'netapi32.lib',
        'psapi.lib',
        'shlwapi.lib',
        'user32.lib',
        'shcore.lib',
        'userenv.lib',
        'version.lib',
        'wintrust.lib',
        'wtsapi32.lib',
        core_env['atls_libs'][core_env.Bit('debug')],
        core_env['crt_libs'][core_env.Bit('debug')],
        core_env.GetMultiarchLibName('base'),
        core_env.GetMultiarchLibName('common'),
        core_env.GetMultiarchLibName('goopdate_lib'),
        core_env.GetMultiarchLibName('logging'),
        core_env.GetMultiarchLibName('security'),
        ],
  RCFLAGS = [
      '/DVERSION_MAJOR=%d' % omaha_version_info.version_major,
      '/DVERSION_MINOR=%d' % omaha_version_info.version_minor,
      '/DVERSION_BUILD=%d' % omaha_version_info.version_build,
      '/DVERSION_PATCH=%d' % omaha_version_info.version_patch,
      '/DVERSION_NUMBER_STRING=\\"%s\\"' % (
          omaha_version_info.GetVersionString()),
      ],
)

if core_env.Bit('has_device_management'):
  core_env.Append(
      LIBS = [
          core_env.GetMultiarchLibName('dm_proto'),
      ],
  )

google_core_res_target = 'resource.res'
google_core_res = core_env.RES(source = 'resource.rc',
                               target = google_core_res_target)
core_env.Depends(google_core_res, 'GoogleUpdateCore.manifest')

google_core_inputs = [
    'core_launcher.cc',
    'winmain.cc',
    google_core_res,
    ]

exe_name = 'HerondUpdateCore'

unsigned_core = core_env.ComponentProgram(
    prog_name='%s_unsigned.exe' % exe_name,
    source=google_core_inputs,
)

signed_core = core_env.DualSignedBinary(
    target='%s.exe' % exe_name,
    source=unsigned_core,
)

env.Replicate('$STAGING_DIR', signed_core)

