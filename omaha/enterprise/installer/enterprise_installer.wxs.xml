<?xml version='1.0' encoding='windows-1252'?>
<Wix xmlns='http://schemas.microsoft.com/wix/2006/wi'>
  <?define CompanyFullName = 'Google LLC'?>
  <?define Copyright = 'Copyright 2007-2010 Google LLC'?>

  <Product
    Id='$(var.MsiProductId)'
    Name='$(var.ProductName)'
    Language='1033'
    Codepage='1252'
    UpgradeCode='$(var.MsiUpgradeCode)'
    Version='$(var.ProductVersion)'
    Manufacturer='$(var.CompanyFullName)'>

    <Package
      Id='*'
      Description='$(var.ProductName) Installer'
      Comments='$(var.Copyright)'
      Manufacturer='$(var.CompanyFullName)'
      Languages='1033'
      SummaryCodepage='1252'
      InstallerVersion='150'
      InstallPrivileges='elevated'
      Compressed='yes' />

    <Upgrade Id='$(var.MsiUpgradeCode)'>
      <UpgradeVersion Property='UPGRADING'
                      OnlyDetect='no'
                      Minimum='0.0.0.0' IncludeMinimum='yes'
                      Maximum='$(var.ProductVersion)' IncludeMaximum='no' />
      <UpgradeVersion Property='NEWERVERSIONDETECTED' 
                      OnlyDetect='yes'
                      Minimum='$(var.ProductVersion)' IncludeMinimum='yes' />
    </Upgrade>

    <!-- Per-machine installation - make sure product appears for all users. -->
    <Property Id='ALLUSERS' Value='1' />

    <?ifdef $(var.ProductIcon)?>
      <!-- If var.ProductIcon is defined, use that as an icon in the ARP
           dialog, otherwise rely on the ARP dialog's heuristics:
           http://blogs.msdn.com/oldnewthing/archive/2004/07/09/178342.aspx -->
      <Icon Id='icon.ico' SourceFile='$(var.ProductIcon)'/>
      <Property Id='ARPPRODUCTICON' Value='icon.ico' />
    <?endif?>

    <!-- ARPNOMODIFY does two things:
         1) Removes the 'Modify' button from the ARP dialog.
         2) Causes the 'Remove' command to invoke msiexec /X instead of /I
            (the intent being that WITH a Modify button, clicking either
            Modify or Remove command will launch your installer UI). -->
    <Property Id='ARPNOMODIFY' Value='1' />

    <!-- Find the uninstall string to be used for the product. Only used for
         uninstallation. -->
    <Property Id='UNINSTALLCMDLINE'>
      <RegistrySearch Id='UninstallCmdSearch'
                      Root='HKLM'
                      Type='raw'
                      Key='Software\BraveSoftware\Update\ClientState\$(var.ProductGuid)'
                      Name='UninstallString'/>
    </Property>
    <Property Id='UNINSTALLCMDARGS'>
      <RegistrySearch Id='UninstallArgSearch'
                      Root='HKLM'
                      Type='raw'
                      Key='Software\BraveSoftware\Update\ClientState\$(var.ProductGuid)'
                      Name='UninstallArguments'/>
    </Property>

    <UI>
      <Error Id='4000'>A newer version of the $(var.ProductName) enterprise installer is already installed.</Error>
    </UI>

    <!-- Eliminates "warning LGHT1076 : ICE71: The Media table has no entries."
    -->
    <Media Id='1' />

    <Directory Id='TARGETDIR' Name='SourceDir'>
      <Directory Id='ProgramFilesFolder'>
      </Directory>
    </Directory>

    <Binary Id='$(var.ProductNameLegalIdentifier)Installer'
            SourceFile='$(var.ProductInstallerPath)' />

    <Binary Id='MsiInstallerCustomActionDll'
            SourceFile='$(var.MsiInstallerCADll)' />

    <Feature Id='Complete' Level='1'>
      <ComponentRef Id='ComponentGoogleUpdate' />
    </Feature>

    <CustomAction Id='NewerVersionError' Error='4000'/>

    <CustomAction Id='SetInstallerInstallCommandProperty'
      Property='FullProductInstallerInstallCommand'
      Value='$(var.ProductInstallerInstallCommand)'
      Execute='immediate'
      Return='check' />
    <CustomAction 
      Id='AppendDisableUpdateRegistrationArgToInstallerInstallCommandProperty'
      Property='FullProductInstallerInstallCommand'
      Value='[FullProductInstallerInstallCommand]
             $(var.ProductInstallerDisableUpdateRegistrationArg)'
      Execute='immediate'
      Return='check' />
    <!-- Send the ProductGuid to the ShowInstallerResultUIString custom action.
         The value is accessed through the "CustomActionData" property from
         within the action itself. -->
    <CustomAction Id='SetAppGuidProperty'
      Property='ShowInstallerResultUIString'
      Value='$(var.ProductGuid)' />

    <!-- A custom action to be executed on rollback to log and display the
         LastInstallerResultUIString. -->
    <CustomAction Id='ShowInstallerResultUIString'
      BinaryKey='MsiInstallerCustomActionDll'
      DllEntry='ShowInstallerResultUIString'
      Execute='rollback'
      Impersonate='no' />

    <CustomAction Id='Install$(var.ProductNameLegalIdentifier)'
      BinaryKey='$(var.ProductNameLegalIdentifier)Installer'
      Impersonate='no'
      Execute='deferred'
      ExeCommand='[FullProductInstallerInstallCommand]'
      Return='check' />
    <CustomAction Id='CallUninstaller.SetProperty'
      Property='UninstallCmd'
      Value='[UNINSTALLCMDLINE] $(var.ProductUninstallerAdditionalArgs)'
      Execute='immediate'
      Return='check' />
    <CustomAction Id='CallUninstallerArgs.SetProperty'
      Property='UninstallCmdArgs'
      Value='[UNINSTALLCMDARGS]'
      Execute='immediate'
      Return='check' />
    <CustomAction Id='CallUninstaller'
      Property='UninstallCmd'
      ExeCommand='[UninstallCmdArgs] $(var.ProductUninstallerAdditionalArgs)'
      Impersonate='no'
      Execute='deferred'
      Return='check' />

    <InstallExecuteSequence>
      <RemoveExistingProducts After='InstallValidate' />

      <Custom Action='NewerVersionError' After='FindRelatedProducts'>
        NEWERVERSIONDETECTED
      </Custom>

      <!-- Any operations that rely on values, such as brand and usagestats, in
           ClientState should not run until after
           InstallGoogleUpdateAndRegister. This is sequenced before InstallFiles
           so that can be used as well.
           It is also advisable to write the Clients key after this point so
           the specific values in the installer will replace the ones Google
           Update writes as part of /registerproduct. -->
      <!-- The app's uninstaller MUST delete the entire Clients key even if
           values it didn't write are present. The Google Update Fragment writes
           "pv" and "name" when it calls /registerproduct. While apps should
           always write and cleanup "name", not all do and this can cause
           problems.-->
      <!-- TODO(omaha): Support Rollback? Need to determine whether Product
           was installed before installing it and only add the rollback then.
      <Custom Action='Rollback$(var.ProductNameLegalIdentifier)'
              After='InstallFiles'>
        (($ComponentGoogleUpdate>2) OR REINSTALL) AND (NOT $(var.ProductNameLegalIdentifier)_INSTALLED)
      </Custom>
      Change After='InstallFiles' below to
      After='Rollback$(var.ProductNameLegalIdentifier)'. -->
      <Custom Action='SetInstallerInstallCommandProperty'
              After='InstallFiles'>
        (($ComponentGoogleUpdate>2) OR REINSTALL)
      </Custom>
      <Custom Action='AppendDisableUpdateRegistrationArgToInstallerInstallCommandProperty'
              After='SetInstallerInstallCommandProperty'>
        (($ComponentGoogleUpdate>2) OR REINSTALL) AND DISABLE_UPDATES
      </Custom>
      <Custom Action='SetAppGuidProperty'
              After='AppendDisableUpdateRegistrationArgToInstallerInstallCommandProperty'>
        (($ComponentGoogleUpdate>2) OR REINSTALL)
      </Custom>
      <Custom Action='ShowInstallerResultUIString'
              After='SetAppGuidProperty'>
        (($ComponentGoogleUpdate>2) OR REINSTALL)
      </Custom>
      <Custom Action='Install$(var.ProductNameLegalIdentifier)'
              After='ShowInstallerResultUIString'>
        (($ComponentGoogleUpdate>2) OR REINSTALL)
      </Custom>

      <Custom Action='CallUninstallerArgs.SetProperty'
              Before='CallUninstaller.SetProperty'>
        $ComponentGoogleUpdate=2
      </Custom>
      <Custom Action='CallUninstaller.SetProperty'
              Before='CallUninstaller'>
        $ComponentGoogleUpdate=2
      </Custom>
      <Custom Action='CallUninstaller'
              Before='RemoveFiles'>
        $ComponentGoogleUpdate=2
      </Custom>

    </InstallExecuteSequence>

  </Product>
</Wix>
