# Copyright 2008-2009 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

Import('env')

env.BuildSConscript('x86_encoder')

for omaha_version_info in env['omaha_versions_info']:
  temp_env = env.Clone()

  prefix = omaha_version_info.filename_prefix
  if prefix:
    temp_env['OBJPREFIX'] = temp_env.subst(prefix + 'obj/$OBJPREFIX')

  temp_env.Append(
      CPPDEFINES = [
        '/D_HAS_EXCEPTIONS=0',
        '_CRT_SECURE_NO_WARNINGS',
        '_STATIC_CPPLIB',
        '_ATL_MIN_CRT',
        '_ATL_CSTRING_NO_CRT',
      ],
      CCFLAGS = [
          '/D_SECURE_SCL=1',
          '/EHsc',
      ],
      LIBS = [
          '$LIB_DIR/base.lib',
          '$LIB_DIR/common.lib',
          '$LIB_DIR/net.lib',
          '$LIB_DIR/security.lib',
          'lzma',
          'mi_exe_stub_lib',
          temp_env['atls_libs'][temp_env.Bit('debug')],
          temp_env['crt_libs'][temp_env.Bit('debug')],
          'crypt32.lib',
          'iphlpapi.lib',
          'netapi32.lib',
          'psapi.lib',
          'shlwapi',
          'userenv.lib',
          'version',
          'wtsapi32.lib',
          ],
      RCFLAGS = [
          '/DVERSION_MAJOR=%d' % omaha_version_info.version_major,
          '/DVERSION_MINOR=%d' % omaha_version_info.version_minor,
          '/DVERSION_BUILD=%d' % omaha_version_info.version_build,
          '/DVERSION_PATCH=%d' % omaha_version_info.version_patch,
          '/DVERSION_NUMBER_STRING=\\"%s\\"' % (
              omaha_version_info.GetVersionString()),
          '/DLANGUAGE_STRING=\\"%s\\"' % 'en'
          ],
  )


  exe_inputs = temp_env.RES(
      target=prefix + 'mi.res',
      source=[
          'mi.rc',
      ],
  )

  # Force a rebuild when the version changes.
  temp_env.Depends(exe_inputs, '$MAIN_DIR/VERSION')

  for language in omaha_version_info.GetSupportedLanguages():
    base_name = 'mi_generated_resources_' + language
    exe_inputs += temp_env.RES(
        target=prefix + base_name + '.res',
        source=base_name + '.rc',
    )

  temp_env.ComponentProgram(
      prog_name = prefix + 'mi_exe_stub',
      source = exe_inputs,
  )


local_env = env.Clone()

# Avoid target conflicts over extractor.obj
local_env['OBJSUFFIX'] = '_mi' + local_env['OBJSUFFIX']

local_inputs = [
    'mi.cc',
    'process.cc',
    'tar.cc',
    '../base/extractor.cc',
]

local_env.ComponentLibrary('mi_exe_stub_lib', local_inputs)
