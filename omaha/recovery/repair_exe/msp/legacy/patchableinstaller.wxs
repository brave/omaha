<?xml version="1.0" encoding="Windows-1252"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
  <Product Id="A92DAB39-4E2C-4304-9AB6-BC44E68B55E2"
    Name="Google Update Helper"
    Language="1033"
    Codepage="1252"
    UpgradeCode="9515FFBD-40AB-4690-B983-4FA8E14EE7F5"
    Version="$(var.GoogleUpdateVersion)"
    Manufacturer="Google LLC">

    <Package Id="*"
      Description="Google Update Helper"
      Comments="Copyright 2018 Google LLC"
      Manufacturer="Google LLC"
      Languages="1033"
      SummaryCodepage="1252"
      InstallerVersion="300"
      InstallPrivileges="elevated"
      Compressed="no" />

    <!-- Cannot patch an msi without a file -->
    <Media Id="1" Cabinet="required.cab" EmbedCab="yes"/>

    <Directory Id="TARGETDIR" Name="SourceDir">
      <Directory Id="ProgramFilesFolder">
        <Directory Id="GoogleProgramDir" Name="Google">
          <Directory Id="UpdateDir" Name="Update">

            <Component Id="MainComponent" Guid="717B7059-A988-492f-AF1B-DCF70BE809AB">
              <!-- Cannot have an msi patch without a file -->
<?if $(var.FinalMsi) = 1 ?>
              <File Id="RequiredFile" Name="RequiredFile.txt" DiskId="1" Source="$(var.RequiredFile)" Vital="yes"/>
<?endif?>
              <!-- Cannot have an empty component -->
              <RegistryValue Id="NonEmptyComponent" Action="write" Root="HKLM" Key="SOFTWARE\BraveSoftware\Update" Name="MsiStubRun" Type="integer" Value="0" />
            </Component>

          </Directory>
        </Directory>
      </Directory>
    </Directory>

    <PatchCertificates>
      <DigitalCertificate Id="CertificateForPatching" SourceFile="$(var.CertificateFile)" />
    </PatchCertificates>

    <Feature Id="Complete" Level="1">
      <ComponentRef Id="MainComponent" />
    </Feature>

<?if $(var.FinalMsi) = 1 ?>
    <Binary Id="ExecuteLibrary" SourceFile="$(var.ExecuteCustomActionDLL)" />

    <!-- Need to mark these custom properties as secure so that in Vista they are passed to the high-integrity msi server -->
    <Property Id="EXECUTABLECOMMANDLINE" Secure="yes"/>

    <CustomAction Id="LaunchFile.PropertyAssign" Property="LaunchFile" Value="[EXECUTABLECOMMANDLINE]" />

    <CustomAction Id="LaunchFile" Return="ignore" Execute="deferred" Impersonate="no"
      BinaryKey="ExecuteLibrary" DllEntry="VerifyFileAndExecute"/>

    <InstallExecuteSequence>
      <Custom Action="LaunchFile.PropertyAssign" Before="LaunchFile">NOT EXECUTABLECOMMANDLINE=""</Custom>
      <Custom Action="LaunchFile" Before="InstallFinalize">NOT EXECUTABLECOMMANDLINE=""</Custom>
    </InstallExecuteSequence>
<?endif?>

    <!-- Make sure the product shows up for all users -->
    <Property Id="ALLUSERS" Value="1" />

    <!-- Hide ARP entry -->
    <Property Id="ARPSYSTEMCOMPONENT" Value="1" />

    <!-- Disable rollback to make the msi and patch a little faster.
         If an install, patch, or unpatch fails, it is ok to leave behind a partial install/patch/unpatch.
         A failed install prevents patching anyway.
         A failed patch should not stop us from patching again (at least for a few more times).
         Rolling back a failed unpatch does not enable us to patch again.
         And in all cases, the uninstaller should clean up whatever may be left behind. -->
    <Property Id="DISABLEROLLBACK" Value="1" />

  </Product>
</Wix>
