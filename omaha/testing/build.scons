#!/usr/bin/python2.4
#
# Copyright 2009-2010 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

import binascii
import os

Import('env')

def _AddCommonOptions(local_env):
  local_env['CPPDEFINES'] += [
      '_ATL_FREE_THREADED',
      'UNITTEST',
      ]

  # A test is a console application, so we tell mk to link to
  # main() as opposed to WinMain().
  local_env.FilterOut(LINKFLAGS = ['/SUBSYSTEM:WINDOWS'])
  local_env['LINKFLAGS'] += ['/SUBSYSTEM:CONSOLE']

#=============omaha_unittest Dependencies======================================
# TODO(omaha): Replace $STAGING_DIR with $TESTS_DIR when HAMMER_RUNS_TESTS
# becomes the default.

# Install files from the testing/unittest_support/ directory.
unittest_support = env.Replicate('$STAGING_DIR/unittest_support/', [
    # Files used by the common unit tests.
    'unittest_support/certificate-with-private-key.pfx',
    'unittest_support/certificate-without-private-key.cer',
    'unittest_support/declaration.txt',
    'unittest_support/manifest.xml',

    # Files used by code signing and file verification tests. The string of
    # bytes in the chrome file names represent the serial of the certificate.
    # Chrome certificate: (11/13/2011 to 11/13/2014) revoked on 1/28/2014
    'unittest_support/chrome_certificate_09E28B26DB593EC4E73286B66499C370.dll',
    # Chrome certificate: sha1 (01/28/2014 to 01/29/2016)
    'unittest_support/chrome_certificate_2912C70C9A2B8A3EF6F6074662D68B8D.dll',
    'unittest_support/CodeRed.crx3',
    'unittest_support/GoogleUpdate_corrupted.exe',
    'unittest_support/GoogleUpdate_now_expired_cert.exe',
    'unittest_support/GoogleUpdate_old_signature.exe',
    'unittest_support/GoogleUpdateHelper.msi',
    'unittest_support/old_google_certificate.dll',
    'unittest_support/SaveArguments.exe',
    'unittest_support/SaveArguments_different_ou.exe',
    'unittest_support/SaveArguments_multiple_cn.exe',
    'unittest_support/SaveArguments_no_cn.exe',
    'unittest_support/SaveArguments_OmahaTestSigned.exe',
    'unittest_support/SaveArguments_unsigned_no_resources.exe',
    'unittest_support/SaveArguments_unsigned_wrong_markup_size.exe',
    'unittest_support/SaveArguments_unsigned_wrong_markup_value.exe',
    'unittest_support/SaveArguments_unsigned_wrong_resource_name.exe',
    'unittest_support/SaveArguments_wrong_cn.exe',

    # Omaha and Chrome certificate: sha1 (12/13/2015 to 12/14/2016).
    # serial=4c40dba5f988fae57a57d6457495f98b
    'unittest_support/Sha1_4c40dba5f988fae57a57d6457495f98b.exe',

    # Omaha and Chrome certificate: sha1 (11/28/2016 to 11/21/2019).
    # serial=14F8FDD167F92402B1570B5DC495C815
    'unittest_support/sha1_14F8FDD167F92402B1570B5DC495C815.sys',

    # Omaha certificate: sha1 (11/07/2019 to 11/16/2022).
    # serial=06aea76bac46a9e8cfe6d29e45aaf033
    'unittest_support/sha1_06aea76bac46a9e8cfe6d29e45aaf033.sys',

    'unittest_support/Sha1_4c40dba5f988fae57a57d6457495f98b_and_sha2_2a9c21acaaa63a3c58a7b9322bee948d.exe',

    # Omaha and Chrome certificate: sha256 (12/15/2015 to 12/16/2018).
    # serial=2a9c21acaaa63a3c58a7b9322bee948d
    'unittest_support/sha2_2a9c21acaaa63a3c58a7b9322bee948d.exe',

    # Omaha and Chrome certificate: sha256 (11/06/2018 to 11/17/2021).
    # serial=0c15be4a15bb0903c901b1d6c265302f
    'unittest_support/sha2_0c15be4a15bb0903c901b1d6c265302f.msi',

    # Google LLC certificate sha256 valid from 07-01-2021 to 07-10-2024.
    # thumbprint=2673ea6cc23beffda49ac715b121544098a1284c.
    # serial=0e4418e2dede36dd2974c3443afb5ce5.
    'unittest_support/sha2_0e4418e2dede36dd2974c3443afb5ce5.msi',

    # The actual Chrome setup signed with sha256 (11/06/2018 to 11/17/2021).
    # serial=0c15be4a15bb0903c901b1d6c265302f
    'unittest_support/chrome_setup.exe',

    # Minidump file for the crash unit test.
    'unittest_support/minidump.dmp',
    'unittest_support/minidump.txt',

    # PAC file for testing local PAC file support.
    'unittest_support/localproxytest.pac',

    # CRX Verifier test files.
    'unittest_support/unsigned.crx3',
    'unittest_support/valid.crx2',
    'unittest_support/valid_no_publisher.crx3',
    'unittest_support/valid_publisher.crx3',

    # Files used by offline_utils_unittest.
    'unittest_support/{CDABE316-39CD-43BA-8440-6D1E0547AEE6}.v2.gup',
    'unittest_support/{CDABE316-39CD-43BA-8440-6D1E0547AEE6}.v3.gup',
    ])

# Saved versions of Google Update for the Setup tests.
unittest_support += env.Replicate(
    '$STAGING_DIR/unittest_support/omaha_1.2.131.7_shell/', [
    'unittest_support/omaha_1.2.131.7_shell/GoogleUpdate.exe',
    'unittest_support/omaha_1.2.131.7_shell/BraveUpdate.exe',
    ])
unittest_support += env.Replicate(
    '$STAGING_DIR/unittest_support/omaha_1.2.183.9_shell/', [
    'unittest_support/omaha_1.2.183.9_shell/GoogleUpdate.exe',
    'unittest_support/omaha_1.2.183.9_shell/BraveUpdate.exe',
    ])
unittest_support += env.Replicate('$STAGING_DIR/unittest_support/omaha_1.2.x/',
    [ 'unittest_support/omaha_1.2.x/GoogleUpdate.exe',
      'unittest_support/omaha_1.2.x/BraveUpdate.exe'
    ])
unittest_support += env.Replicate('$STAGING_DIR/unittest_support/omaha_1.3.x/',
    [ 'unittest_support/omaha_1.3.x/GoogleUpdate.exe',
      'unittest_support/omaha_1.3.x/BraveUpdate.exe',
      'unittest_support/omaha_1.3.x/goopdate.dll',
      'unittest_support/omaha_1.3.x/goopdateres_en.dll',
    ])

# Newer versions of Google Update for the Setup tests.
#unittest_support += env.Replicate(
#              '$STAGING_DIR/unittest_support/omaha_1.3.x_newer/',
#              'unittest_support/omaha_1.2.x_newer/GoogleUpdate.exe')

# Copy longrunning.exe to GoogleUpdate.exe for use in Setup.
unittest_support += env.Replicate(
    target='$STAGING_DIR/unittest_support/does_not_shutdown/',
    source='$MAIN_DIR/testing/unittest_support/LongRunningSilent.exe',
    REPLICATE_REPLACE=[('LongRunningSilent\\.exe', 'BraveUpdate.exe')],
)

# download_cache test files
loc_guid = 'download_cache_test/{7101D597-3481-4971-AD23-455542964072}'
unittest_support += env.Replicate(
                        '$STAGING_DIR/unittest_support/' + loc_guid,
                        'unittest_support/%s/livelysetup.exe' % loc_guid)

loc_guid = 'download_cache_test/{89640431-FE64-4da8-9860-1A1085A60E13}'
unittest_support += env.Replicate(
                        '$STAGING_DIR/unittest_support/' + loc_guid,
                        'unittest_support/%s/gears-win32-opt.msi' % loc_guid)

# Create tagged MSI files for testing.
tags = {
  'brand-only': (None, 'brand=QAQA', None),
  'ampersand-ending': (None, 'brand=QAQA&', None),
  'multiple': (None,
               ('appguid={8A69D345-D564-463C-AFF1-A69D9E530F96}&'
                'iid={2D8C18E9-8D3A-4EFC-6D61-AE23E3530EA2}&'
                'lang=en&browser=4&usagestats=0&appname=Google%20Chrome&'
                'needsadmin=prefers&brand=CHMB&'
                'installdataindex=defaultbrowser'), None),
  'empty-key': (None, '=value&brand=QAQA', None),
  'empty-value': (None, 'brand=', None),
  'empty-tag': (None, '', None),
  'invalid-marker': ('Gact2.0Foo', 'brand=QAQA', None),
  'invalid-length': (None, 'brand=QAQA', 3000),
  'invalid-key': (None, 'br*nd=QAQA', None),
  'invalid-value': (None, 'brand=QA*A', None),
  'bad-format': (None, 'brand', None),
  'bad-format2': (None, '=======&=======&&&=&&&&0', None),
}
for tag_name, tag_option in tags.items():
  unittest_support += env.OmahaCertificateTagForTesting(
     target = '$STAGING_DIR/unittest_support/tagged_msi/GUH-%s.msi' % tag_name,
     source = 'unittest_support/GoogleUpdateHelper.msi',
     magic_bytes = tag_option[0],
     tag = tag_option[1],
     tag_length = tag_option[2])

# Create branded test MSIs for install manager testing.
_GUID_NAMESPACE = binascii.a2b_hex('BE19B3E4502845af8B3E67A99FCDCFB1')
_WXS_TEMPLATE_NAME = '$OBJ_ROOT/testing/test_foo.wxs.xml'
(major, minor, build, patch) = (1,0,101,0)
version = '%d.%d.%d.%d' % (major, minor, build, patch)
msi_base_name = 'test_foo_v' + version
test_exe = env.OmahaBuildTestExe(version, major, minor, build, patch)
test_msi = env.OmahaBuildTestMsi(version, _GUID_NAMESPACE, test_exe[0], _WXS_TEMPLATE_NAME, msi_base_name)
env.Replicate('$STAGING_DIR/unittest_support', test_msi)

#=============General Unit Test Dependencies===================================
# Many unit tests rely on string resources. omaha_unittest.cc loads them but
# assumes they are in the same directory as the tests.
# For coverage builds, use a custom command instead of Replicate() because
# Replicate() will cause the DLL to be re-instrumented.
omaha_dll = '$STAGING_DIR/goopdate.dll'
resource_dll = '$STAGING_DIR/goopdateres_en.dll'
if env.IsCoverageBuild():
  env.CopyFileToDirectory('$TESTS_DIR', omaha_dll)
  env.CopyFileToDirectory('$TESTS_DIR', resource_dll)
else:
  env.Replicate('$TESTS_DIR', omaha_dll)
  env.Replicate('$TESTS_DIR', resource_dll)
#=============UnitTests========================================================


omaha_version_info = env['omaha_versions_info'][0]
version_string = omaha_version_info.GetVersionString()

run_as_invoker = env.RES('run_as_invoker.res', '$MAIN_DIR/base/run_as_invoker.rc')
env.Depends(run_as_invoker, '$MAIN_DIR/base/run_as_invoker.manifest')

#
# Builds omaha_unittest
#
omaha_unittest_env = env.Clone()
_AddCommonOptions(omaha_unittest_env)

omaha_unittest_env.FilterOut(LINKFLAGS = ['/NODEFAULTLIB'])

omaha_unittest_libs = [
    omaha_unittest_env['atls_libs'][omaha_unittest_env.Bit('debug')],

    '$LIB_DIR/base.lib',
    '$LIB_DIR/breakpad.lib',
    '$LIB_DIR/client.lib',  # TODO(omaha): Might be able to make separate exe.
    '$LIB_DIR/common.lib',
    '$LIB_DIR/core.lib',
    '$LIB_DIR/crash_handler.lib',
    '$LIB_DIR/crx_file.lib',
    '$LIB_DIR/gmock.lib',
    '$LIB_DIR/google_update_recovery.lib',
    '$LIB_DIR/goopdate_lib.lib',
    '$LIB_DIR/gtest.lib',
    '$LIB_DIR/libprotobuf.lib',
    '$LIB_DIR/logging.lib',
    '$LIB_DIR/lzma.lib',
    '$LIB_DIR/net.lib',
    '$LIB_DIR/omaha3_idl.lib',
    '$LIB_DIR/security.lib',
    '$LIB_DIR/service.lib',
    '$LIB_DIR/setup.lib',
    '$LIB_DIR/statsreport.lib',
    '$LIB_DIR/ui.lib',
    '$LIB_DIR/unittest_base_large_with_network.lib',

    'advapi32.lib',
    'bits.lib',
    'comctl32.lib',
    'crypt32.lib',
    'dbghelp.lib',
    'delayimp.lib',       # For delay loading
    'imagehlp.lib',
    'iphlpapi.lib',
    'mstask.lib',
    'netapi32.lib',
    'ole32.lib',
    'oleaut32.lib',
    'psapi.lib',
    'rpcns4.lib',
    'rpcrt4.lib',
    'shlwapi.lib',
    'taskschd.lib',
    'urlmon.lib',
    'userenv.lib',
    'uxtheme.lib',
    'version.lib',
    'wbemuuid.lib',
    'wininet.lib',
    'wintrust.lib',
    'ws2_32.lib',
    'wtsapi32.lib',
]
if omaha_unittest_env.Bit('has_device_management'):
  protobuf_src_dir = os.getenv('OMAHA_PROTOBUF_SRC_DIR',
                               '$GOOGLE3/third_party/protobuf/src')
  omaha_unittest_libs.append('$LIB_DIR/dm_proto.lib')
  omaha_unittest_env.Append(
      CPPPATH = [
          protobuf_src_dir,
          '$TARGET_ROOT/proto_files',
      ],
  )

# Add conditional lib dependencies.
if omaha_unittest_env.IsBuildingModule('mi_exe_stub'):
  omaha_unittest_libs.append('$LIB_DIR/bcj2_lib.lib')

if omaha_unittest_env.IsBuildingModule('plugins'):
  omaha_unittest_libs += [
      '$LIB_DIR/update.lib',
      '$LIB_DIR/update_control_idl_guids_lib.lib',
      '$LIB_DIR/update_test_helpers.lib',
  ]

if omaha_unittest_env.IsBuildingModule('enterprise'):
  omaha_unittest_libs.append('$LIB_DIR/custom_actions_test_lib.lib')

omaha_unittest_libs += omaha_unittest_env.GetAllInOneUnittestLibs()

omaha_unittest_env.Append(
    CCFLAGS = [
        '/wd4100',  # unreferenced formal parameter
        '/wd4244',  # possible loss of data
        '/wd4388',  # signed/unsigned mismatch
        '/wd4389',  # signed/unsigned mismatch
        '/wd4647',  # behavior change: __is_pod(type) has different value
        '/wd4800',  # forcing value to bool 'true' or 'false'
        '/wd4826',  # Conversion from 'type_1' to 'type_2' is sign-extended.
        '/wd4946',  # reinterpret_cast used between related classes

        # Disable static analysis warnings.
        '/wd6326',  # Potential comparison of a constant with another constant.
        ],
    CPPDEFINES = [
        'OMAHA_BUILD_VERSION=0x%.4x%.4x%.4x%.4x' % (
            omaha_version_info.version_major,
            omaha_version_info.version_minor,
            omaha_version_info.version_build,
            omaha_version_info.version_patch),
        'OMAHA_BUILD_VERSION_STRING=_T(\\"%s\\")' % version_string,
        ],
    LIBS = omaha_unittest_libs,
    LINKFLAGS = [
        '/DELAYLOAD:shlwapi.dll',
        '/DELAYLOAD:shell32.dll',
        '/DELAYLOAD:psapi.dll',
        '/DELAYLOAD:netapi32.dll',
        '/DELAYLOAD:Wtsapi32.dll',
        ],
    RCFLAGS = [
        '/DVERSION_MAJOR=%d' % omaha_version_info.version_major,
        '/DVERSION_MINOR=%d' % omaha_version_info.version_minor,
        '/DVERSION_BUILD=%d' % omaha_version_info.version_build,
        '/DVERSION_PATCH=%d' % omaha_version_info.version_patch,
        '/DVERSION_NUMBER_STRING=\\"%s\\"' % version_string,
        '/DLANGUAGE_STRING=\\"en\\"'
        ],
)


# TODO(omaha): Separate this environment as much as appropriate.
unittest_base_env = omaha_unittest_env.Clone()

unittest_base_env.Append(
    LIBS = [
        '$LIB_DIR/common.lib',
    ],
)

unittest_base_env.ComponentLibrary(
  'unittest_base',
  [ 'omaha_unittest.cc', 'unit_test.cc', ]
)

unittest_base_env.ComponentLibrary(
    'unittest_base_large_with_network',
    [ 'unittest_base.lib',
      'omaha_unittest_main.cc',
      'omaha_unittest_network.cc',
    ]
)

unittest_base_env.ComponentLibrary(
    'unittest_base_small',
    [ 'unittest_base.lib', 'omaha_unittest_main_small_tests.cc', ]
)

unittest_base_env.ComponentLibrary(
    'unittest_base_small_with_resources',
    [ 'unittest_base.lib',
      'omaha_unittest_main_small_tests_with_resources.cc',
    ]
)


# TODO(omaha3): Add tests from mainline that were removed during the integrate.

omaha_unittest_inputs = [
    # Base unit tests
    '../base/app_util_unittest.cc',
    '../base/browser_utils_unittest.cc',
    '../base/cgi_unittest.cc',
    '../base/command_line_parser_unittest.cc',
    '../base/command_line_validator_unittest.cc',
    '../base/commands_unittest.cc',
    '../base/disk_unittest.cc',
    '../base/dynamic_link_kernel32_unittest.cc',
    '../base/encrypt_test.cc',
    '../base/environment_block_modifier_unittest.cc',
    '../base/environment_utils_unittest.cc',
    '../base/error_unittest.cc',
    '../base/etw_log_writer_unittest.cc',
    '../base/event_trace_consumer_unittest.cc',
    '../base/event_trace_controller_unittest.cc',
    '../base/event_trace_provider_unittest.cc',
    '../base/extractor_unittest.cc',
    '../base/file_reader_unittest.cc',
    '../base/file_unittest.cc',
    '../base/firewall_product_detection_unittest.cc',
    '../base/highres_timer_unittest.cc',
    '../base/logging_unittest.cc',
    '../base/omaha_version_unittest.cc',
    '../base/path_unittest.cc',
    '../base/proc_utils_unittest.cc',
    '../base/process_unittest.cc',
    '../base/queue_timer_unittest.cc',
    '../base/reactor_unittest.cc',
    '../base/reg_key_unittest.cc',
    '../base/registry_monitor_manager_unittest.cc',
    '../base/safe_format_unittest.cc',
    '../base/scoped_impersonation_unittest.cc',
    '../base/scoped_ptr_cotask_unittest.cc',
    '../base/service_utils_unittest.cc',
    '../base/shell_unittest.cc',
    '../base/signatures_unittest.cc',
    '../base/signaturevalidator_unittest.cc',
    '../base/string_unittest.cc',
    '../base/synchronized_unittest.cc',
    '../base/system_unittest.cc',
    '../base/system_info_unittest.cc',
    '../base/thread_pool_unittest.cc',
    '../base/time_unittest.cc',
    '../base/timer_unittest.cc',
    '../base/user_info_unittest.cc',
    '../base/user_rights_unittest.cc',
    '../base/utils_unittest.cc',
    '../base/vistautil_unittest.cc',
    '../base/vista_utils_unittest.cc',
    '../base/wmi_query_unittest.cc',
    '../base/xml_utils_unittest.cc',

    # Base security unit tests.
    '../base/security/hmac_unittest.cc',
    '../base/security/sha256_unittest.cc',
    '../base/security/p256_ecdsa_unittest.cc',
    '../base/security/p256_unittest.cc',
    '../base/security/p256_prng_unittest.cc',

    # Client unit tests
    '../client/bundle_creator_test.cc',
    '../client/bundle_installer_unittest.cc',
    '../client/client_utils_unittest.cc',
    '../client/help_url_builder_test.cc',
    '../client/install_apps_unittest.cc',
    '../client/install_self_unittest.cc',
    '../client/install_self_unittest_no_xml_parser.cc',
    '../client/install_unittest.cc',
    '../client/ua_unittest.cc',

    # Common unit tests
    '../common/app_registry_utils_unittest.cc',
    '../common/command_line_unittest.cc',
    '../common/command_line_builder_unittest.cc',
    '../common/config_manager_unittest.cc',
    '../common/crash_utils_unittest.cc',
    '../common/event_logger_unittest.cc',
    '../common/experiment_labels_unittest.cc',
    '../common/exception_handler_unittest.cc',
    '../common/extra_args_parser_unittest.cc',
    '../common/google_signaturevalidator_unittest.cc',
    '../common/goopdate_utils_unittest.cc',
    '../common/lang_unittest.cc',
    '../common/oem_install_utils_test.cc',
    '../common/omaha_customization_unittest.cc',
    '../common/omaha_brave_customization_unittest.cc',
    '../common/ping_event_unittest.cc',
    '../common/ping_event_download_metrics_unittest.cc',
    '../common/ping_test.cc',
    '../common/protocol_definition_test.cc',
    '../common/scheduled_task_utils_unittest.cc',
    '../common/stats_uploader_unittest.cc',
    '../common/update_request_unittest.cc',
    '../common/url_utils_unittest.cc',
    '../common/web_services_client_unittest.cc',
    '../common/xml_parser_unittest.cc',

    # Crash handler unit tests
    '../crashhandler/crash_analyzer_unittest.cc',

    # Core unit tests
    '../core/core_launcher.cc',
    '../core/core_unittest.cc',
    '../core/scheduler_unittest.cc',
    '../core/system_monitor_unittest.cc',
    '../core/google_update_core_unittest.cc',

    # CRX unit tests
    '../third_party/chrome/files/src/components/crx_file/crx_verifier_unittest.cc',
    '../third_party/chrome/files/src/components/crx_file/id_util_unittest.cc',

    # Google Update unit tests.
    '../google_update/google_update_unittest.cc',

    # Goopdate unit tests
    '../goopdate/application_usage_data_unittest.cc',
    '../goopdate/app_unittest.cc',
    '../goopdate/app_command_configuration_unittest.cc',
    '../goopdate/app_command_formatter_unittest.cc',
    '../goopdate/app_command_model_unittest.cc',
    '../goopdate/app_command_test_base.cc',
    '../goopdate/app_command_unittest.cc',
    '../goopdate/app_bundle_unittest.cc',
    '../goopdate/app_manager_unittest.cc',
    '../goopdate/app_version_unittest.cc',
    '../goopdate/crash_unittest.cc',
    '../goopdate/cred_dialog_unittest.cc',
    '../goopdate/download_manager_unittest.cc',
    '../goopdate/goopdate_unittest.cc',
    '../goopdate/install_manager_unittest.cc',
    '../goopdate/installer_wrapper_unittest.cc',
    '../goopdate/main_unittest.cc',
    '../goopdate/model_unittest.cc',
    '../goopdate/offline_utils_unittest.cc',
    '../goopdate/omaha_customization_goopdate_apis_unittest.cc',
    '../goopdate/omaha_brave_customization_goopdate_apis_unittest.cc',
    '../goopdate/string_formatter_unittest.cc',
    '../goopdate/package_cache_unittest.cc',
    '../goopdate/ping_event_cancel_test.cc',
    '../goopdate/resource_manager_unittest.cc',
    '../goopdate/update_request_utils_unittest.cc',
    '../goopdate/update_response_utils_unittest.cc',
    '../goopdate/worker_unittest.cc',
    '../goopdate/worker_utils_unittest.cc',

    # Net unit tests.
    '../net/bits_request_unittest.cc',
    '../net/bits_utils_unittest.cc',
    '../net/cup_ecdsa_request_unittest.cc',
    '../net/cup_ecdsa_utils_unittest.cc',
    '../net/detector_unittest.cc',
    '../net/http_client_unittest.cc',
    '../net/net_utils_unittest.cc',
    '../net/network_config_unittest.cc',
    '../net/network_request_unittest.cc',
    '../net/simple_request_unittest.cc',
    '../net/winhttp_adapter_unittest.cc',
    '../net/winhttp_vtable_unittest.cc',

    # Code Red-related unit tests.
    # Others are specified in the individual build.scons files.
    '../recovery/client/google_update_recovery_unittest.cc',

    # Setup unit tests.
    '../setup/setup_unittest.cc',
    '../setup/setup_files_unittest.cc',
    '../setup/setup_google_update_unittest.cc',
    '../setup/setup_service_unittest.cc',

    # Statsreport unit tests.
    '../statsreport/aggregator_unittest.cc',
    '../statsreport/aggregator-win32_unittest.cc',
    '../statsreport/formatter_unittest.cc',
    '../statsreport/metrics_unittest.cc',
    '../statsreport/persistent_iterator-win32_unittest.cc',

    # UI unit tests.
    '../ui/splash_screen_test.cc',
    '../ui/progress_wnd_unittest.cc',
    '../ui/yes_no_dialog_unittest.cc',

    # Resource files.
    omaha_unittest_env.RES('omaha_unittest.rc'),
    omaha_unittest_env.RES('omaha_unittest_version.rc'),
    run_as_invoker,

    # Testing unit tests.
    'unit_test_unittest.cc',
    'unittest_debug_helper_unittest.cc',

    # Third party unit tests.
    '../third_party/chrome/files/src/base/cpu_unittest.cc',
    '../third_party/chrome/files/src/base/rand_util_unittest.cc',
    '../third_party/chrome/files/src/crypto/rsa_private_key_unittest.cc',
    '../third_party/chrome/files/src/crypto/signature_creator_unittest.cc',
    '../third_party/chrome/files/src/crypto/signature_verifier_win_unittest.cc',
]

if omaha_unittest_env.Bit('has_device_management'):
  omaha_unittest_inputs += [
      '../goopdate/dm_client_unittest.cc',
      '../goopdate/dm_messages_unittest.cc',
      '../goopdate/dm_storage_test_utils.cc',
      '../goopdate/dm_storage_unittest.cc',
  ]

# Conditionally built unit tests.
if omaha_unittest_env.IsBuildingModule('mi_exe_stub'):
  omaha_unittest_inputs += [
      # Bcj2 encoder unitests.
      '../mi_exe_stub/x86_encoder/bcj2_encoder_unittest.cc',
  ]

if omaha_unittest_env.IsBuildingModule('enterprise'):
  omaha_unittest_inputs += [
      # Custom action unit tests.
      '../enterprise/installer/custom_actions/msi_tag_extractor_test.cc',
  ]

omaha_unittest_inputs += omaha_unittest_env.GetAllInOneUnittestSources()

# Force a rebuild when the version changes and when the header changes since
# the .rc file scanner does not.
omaha_unittest_env.Depends(
    '$OBJ_ROOT/testing/omaha_unittest.res',
    [ '$MAIN_DIR/VERSION', 'resource.h' ]
)

# Ensure that obj files don't collide with ones from non-test build
# TODO(omaha): We should try to avoid rebuilding production code files. Doing so
# should make this unnecessary.
omaha_unittest_env['OBJPREFIX'] = omaha_unittest_env['OBJPREFIX'] + 'testing/'

target_name = 'omaha_unittest'

# omaha_unittest can be built as a test program in 'tests\' or a normal program
# in 'staging\'.
# TODO(omaha3): Switch entirely to the former.
if 'HAMMER_RUNS_TESTS' in os.environ.keys():
  print 'If build fails, you may need to delete test executables from staging\.'
  # Copy all the files from staging to the tests directory so that the unit
  # tests can use them.
  # TODO(omaha3): Consider using the files from staging, though that may cause
  # staging to be polluted.
  omaha_unittest_env.Publish(target_name, 'test_input', '$STAGING_DIR/*')
  # UnitTestHelpersTest.GetLocalAppDataPath requires 'USERNAME'.
  omaha_unittest_env['ENV']['USERNAME'] = os.environ['USERNAME']
  # ConfigManagerTest.GetDir requires 'USERPROFILE'.
  omaha_unittest_env['ENV']['USERPROFILE'] = os.environ['USERPROFILE']
  # UtilsTest.GetEnvironmentVariableAsString requires 'OS'.
  omaha_unittest_env['ENV']['OS'] = os.environ['OS']
  # Tests that use psexec require 'OMAHA_PSEXEC_DIR'
  omaha_unittest_env['ENV']['OMAHA_PSEXEC_DIR'] = os.environ['OMAHA_PSEXEC_DIR']

  # Set environment variables specific to the tests.
  for env_var in os.environ:
    if (not env_var in omaha_unittest_env['ENV'] and
        (env_var.startswith('GTEST_') or env_var.startswith('OMAHA_TEST_'))):
      omaha_unittest_env['ENV'][env_var] = os.environ[env_var]

  test = omaha_unittest_env.ComponentTestProgram(target_name,
                                                 omaha_unittest_inputs,
                                                 COMPONENT_TEST_SIZE='large')

  # resource_manager_unittest.cc uses the Russian resources.
  omaha_unittest_env.Depends(test, '$TESTS_DIR/goopdateres_ru.dll')
else:
  test = omaha_unittest_env.ComponentProgram(target_name, omaha_unittest_inputs)

  # resource_manager_unittest.cc uses the Russian resources.
  omaha_unittest_env.Depends(test, '$STAGING_DIR/goopdateres_ru.dll')

# The tests depend on the unittest_support directory.
omaha_unittest_env.Depends(test, unittest_support)

# extractor_unittest.cc uses GoogleUpdateSetup_repair.exe as a zero-length tag
# cert-tagged exe.
omaha_unittest_env.Depends(test, '$STAGING_DIR/BraveUpdateSetup_repair.exe')

# Customization/UI tests depend on goopdate.dll (for TypeLib/resources)
omaha_unittest_env.Depends(test, '$TESTS_DIR/goopdate.dll')

if env.Bit('all'):
  save_args_env = env.Clone()
  save_args_env.Append(
      LIBS = [
          save_args_env['atls_libs'][save_args_env.Bit('debug')],
          save_args_env['crt_libs'][save_args_env.Bit('debug')],
          '$LIB_DIR/base.lib',

          # These are required by common_lib
          'netapi32.lib',
          'psapi.lib',
          'shlwapi.lib',
          'userenv.lib',
          'version.lib',
          'wtsapi32.lib',
          ],
      RCFLAGS = [
          '/DVERSION_MAJOR=%d' % omaha_version_info.version_major,
          '/DVERSION_MINOR=%d' % omaha_version_info.version_minor,
          '/DVERSION_BUILD=%d' % omaha_version_info.version_build,
          '/DVERSION_PATCH=%d' % omaha_version_info.version_patch,
          '/DVERSION_NUMBER_STRING=\\"%s\\"' % version_string,
          '/DLANGUAGE_STRING=\\"en\\"'
          ],
  )

  save_args_env.FilterOut(LINKFLAGS = ['/SUBSYSTEM:WINDOWS'])
  save_args_env['LINKFLAGS'] += ['/SUBSYSTEM:CONSOLE']

  target_name = 'SaveArguments_unsigned'

  unsigned_inputs = [
      'save_arguments.cc',
      save_args_env.RES('save_arguments_version.rc'),
      run_as_invoker,
      save_args_env.RES('recovery_markup.res',
                        '$MAIN_DIR/recovery/recovery_markup.rc'),
      ]

  # Force a rebuild when the version changes.
  save_args_env.Depends('$OBJ_ROOT/testing/save_arguments_version.res',
                        '$MAIN_DIR/VERSION'
  )

  # Build the *unsigned* executeable
  unsigned_output = save_args_env.ComponentTestProgram(
      prog_name=target_name,
      source=unsigned_inputs,
      COMPONENT_TEST_RUNNABLE=False
  )

  signed_output = save_args_env.DualSignedBinary(
      target='SaveArguments.exe',
      source=unsigned_output,
  )

  save_args_env.Replicate('$TESTS_DIR', signed_output)
