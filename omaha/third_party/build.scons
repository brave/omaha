#!/usr/bin/python2.4
#
# Copyright 2009 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ========================================================================

Import('env')

#
# Build BreakPad library.
#
breakpad_env = env.Clone()
breakpad_env.Dir('breakpad').addRepository(
    env.Dir('$GOOGLE3/third_party/breakpad'))
breakpad_env.Append(
    CCFLAGS = [
        '/wd4061',  # enumerator in switch is not handled by a case label
        '/wd4826',  # conversion is sign-extended
        ],
    CPPDEFINES = [
        # Make breakpad not use a TerminateThread call to clean up one of its
        # worker threads. This is required in order to pass App Verifier tests.
        'BREAKPAD_NO_TERMINATE_THREAD',
        ],
)

_bsrc = 'breakpad/src/'
target_name = 'breakpad'
breakpad_inputs = [
    _bsrc + 'common/windows/guid_string.cc',
    _bsrc + 'common/windows/http_upload.cc',
    _bsrc + 'client/windows/crash_generation/client_info.cc',
    _bsrc + 'client/windows/crash_generation/crash_generation_client.cc',
    _bsrc + 'client/windows/crash_generation/crash_generation_server.cc',
    _bsrc + 'client/windows/crash_generation/minidump_generator.cc',
    _bsrc + 'client/windows/handler/exception_handler.cc',
    _bsrc + 'client/windows/sender/crash_report_sender.cc',
    ]

breakpad_env.ComponentStaticLibraryMultiarch(target_name, breakpad_inputs)

#
# Build gtest library.
#
gtest_env = env.Clone()

_gtest_repository ='$GOOGLE3/third_party/googletest/googletest'
gtest_env.Dir('gtest').addRepository(env.Dir(_gtest_repository))
gtest_env.Append(
    CCFLAGS = [
        '/wd4061',  # enumerator in switch is not handled by a case label
        '/wd4100',  # unreferenced formal parameter
        '/wd4640',  # construction of local static object is not thread-safe
        '/wd4505',  # unreferenced local function has been removed
        '/wd4548',  # expression before comma has no effect
        '/wd4826',  # conversion from 'type1 ' to 'type_2' is sign-extended.
        ],
    CPPDEFINES = [
        '_CRT_NONSTDC_NO_DEPRECATE',
        ],
    CPPPATH = [
        _gtest_repository,
        ],
)

target_name = 'gtest'
gtest_inputs = [ 'gtest/src/gtest-all.cc' ]
gtest_env.ComponentLibrary(
    lib_name=target_name,
    source=gtest_inputs,
)

#
# Build gmock library.
#
gmock_env = env.Clone()


_gmock_repository ='$GOOGLE3/third_party/googletest/googlemock'
gmock_env.Dir('gmock').addRepository(env.Dir(_gmock_repository))
gmock_env.Append(
    CCFLAGS = [
        '/wd4061',  # enumerator is not explicitly handled by a case label
        '/wd4242',  # conversion from type1 to type2, possible loss of data
        '/wd4244',  # conversion from type1 to type2, possible loss of data
        '/wd4628',  # digraphs not supported with -Ze
        '/wd4640',  # construction of local static object is not thread-safe
        '/wd4826',  # conversion from 'type1 ' to 'type_2' is sign-extended.
        ],
    CPPPATH = [
        _gmock_repository,
        ],
)

target_name = 'gmock'
gmock_inputs = [ 'gmock/src/gmock-all.cc' ]
gmock_env.ComponentLibrary(
    lib_name=target_name,
    source=gmock_inputs,
)

#
# Build LZMA library.
#
lzma_env = env.Clone()
lzma_env.Dir('lzma').addRepository(env.Dir('$THIRD_PARTY/lzma'))
lzma_env.FilterOut(CCFLAGS=['/RTC1'])
lzma_env.Append(
    CCFLAGS = [
      '/wd4456',  # declaration of '...' hides previous local declaration
      '/wd4457',  # declaration of '...' hides function parameter
    ],
)
lzma_inputs = [
    'lzma/files/C/Bcj2.c',
    'lzma/files/C/Bra86.c',
    'lzma/files/C/LzmaDec.c',
    ]
lzma_env.ComponentLibrary(
    lib_name='lzma',
    source=lzma_inputs,
)

lzma_env_64 = lzma_env.CloneAndMake64Bit()
lzma_env_64.ComponentLibrary(
    lib_name='lzma_64',
    source=lzma_inputs,
)
